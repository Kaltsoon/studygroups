var StudyGroupsApp = angular.module('StudyGroupsApp', ['ngRoute', 'angularMoment', 'btford.markdown', 'ui.gravatar']);

StudyGroupsApp.config(function($routeProvider){
  function getUserSignedIn($rootScope, Api){
    return Api.getUserSignedIn()
      .then(function(user){
        $rootScope.userSignedIn = user.data.id ? user.data : null;
      });
  }

  $routeProvider
    .when('/study-groups', {
      templateUrl: '/javascripts/views/study_group_list.html',
      controller: 'StudyGroupListController',
      resolve: { userSignedIn: getUserSignedIn }
    })
    .when('/study-groups/:id/:key', {
      templateUrl: '/javascripts/views/study_group.html',
      controller: 'StudyGroupController',
      resolve: { userSignedIn: getUserSignedIn }
    })
    .when('/study-groups/:id/:key/new-page', {
      templateUrl: '/javascripts/views/new_page.html',
      controller: 'CreatePageController',
      resolve: { userSignedIn: getUserSignedIn }
    })
    .when('/study-groups/:groupId/:key/pages/:pageId', {
      templateUrl: '/javascripts/views/page.html',
      controller: 'PageController',
      resolve: { userSignedIn: getUserSignedIn }
    })
    .when('/profile/:username', {
      templateUrl: '/javascripts/views/profile.html',
      controller: 'ProfileController',
      resolve: { userSignedIn: getUserSignedIn }
    })
    .otherwise({
      redirectTo: '/study-groups'
    });
});

StudyGroupsApp.run(function($rootScope, Api){
  $rootScope.signOut = function(){
    Api.signOut()
      .then(function(){
        window.location.href = '/welcome';
      })
  }
});

StudyGroupsApp.service('Api', function($http){
  this.getUserSignedIn = function(){
    return $http.get('/users/user-signed-in');
  }

  this.getUser = function(username){
    return $http.get('/users/' + username);
  }

  this.updateUser = function(user){
    return $http.post('/users/' + user.id + '/update', user);
  }

  this.removeUser = function(id){
    return $http.post('/users/' + id + '/remove');
  }

  this.getChatMessages = function(groupId){
    return $http.get('/chat-messages/from-group/' + groupId);
  }

  this.getUsersStudyGroups = function(){
    return $http.get('/study-groups');
  }

  this.getStudyGroup = function(id, key){
    return $http.get('/study-groups/' + id + '/' + key);
  }

  this.createStudyGroup = function(studyGroup){
    return $http.post('/study-groups/create', studyGroup);
  }

  this.removeStudyGroup = function(id){
    return $http.post('/study-groups/' + id + '/remove');
  }

  this.updateStudyGroup = function(group){
    return $http.post('/study-groups/' + group.id + '/update', group);
  }

  this.getPage = function(id){
    return $http.get('/pages/' + id);
  }

  this.removePage = function(id){
    return $http.post('/pages/' + id + '/remove');
  }

  this.updatePage = function(page){
    return $http.post('/pages/' + page.id + '/update', page);
  }

  this.createPage = function(page){
    return $http.post('/pages/create', page);
  }

  this.createHighlight = function(highlight){
    return $http.post('/highlights/create', highlight);
  }

  this.removeHighlightings = function(pageId){
    return $http.post('/highlights/remove-all/' + pageId);
  }

  this.signOut = function(){
    return $http.post('/users/sign-out');
  }
});

StudyGroupsApp.controller('ChatController', function($scope, $routeParams, $rootScope, Api){
  var socket = io();

  $scope.alertCounter = 0;

  socket.on('chat-message', function(message){
    $scope.$apply(function(){
      if(!$scope.chatIsShowing){
        $scope.alertCounter++;
      }

      $scope.messages.push(JSON.parse(message));
    });
  });

  Api.getChatMessages($routeParams.id)
    .then(function(messages){
      $scope.messages = messages.data;
    })

  $scope.toggleChat = function(){
    $scope.chatIsShowing = !$scope.chatIsShowing;

    if($scope.chatIsShowing){
      $scope.alertCounter = 0;
    }
  }

  $scope.sendChatMessage = function(){
    var messageToSend = { UserId: $rootScope.userSignedIn.id, createdAt: new Date(), StudyGroupId: $routeParams.id, text: $scope.newMessage, User: $rootScope.userSignedIn };

    socket.emit('chat-message', JSON.stringify(messageToSend));

    $scope.newMessage = '';
  }
});

StudyGroupsApp.controller('CreatePageController', function($scope, $location, $rootScope, $routeParams, Api){
  $scope.newPage = {};

  Api.getStudyGroup($routeParams.id, $routeParams.key)
    .then(function(group){
      $scope.group = group.data;

      if($scope.group.UserId != $rootScope.userSignedIn.id){
        $location.path('/study-groups');
      }
    });

  $scope.createPage = function(){
    $scope.newPage.StudyGroupId = $routeParams.id;

    Api.createPage($scope.newPage)
      .then(function(page){
        $location.path('/study-groups/' + $routeParams.id + '/' + $routeParams.key + '/pages/' + page.data.id);
      });
  }
});

StudyGroupsApp.controller('PageController', function($scope, $location, $routeParams, Api){
  $scope.editedPage = {}

  Api.getPage($routeParams.pageId)
    .then(function(page){
      $scope.page = page.data;
      $scope.editedPage = _.pick($scope.page, 'title', 'content', 'id');
    })
    .catch(function(){
      $location.path('/study-groups');
    });

  $scope.toggleEditing = function(){
    $scope.isEditing = !$scope.isEditing;
  }

  $scope.highlight = function(type){
    if($scope.currentlyHighlightedSection && $scope.currentlyHighlightedSection.split(' ').length >= 3){
      var highlight = { type: type, text: _.trim($scope.currentlyHighlightedSection) };

      Api.createHighlight(_.extend(highlight, { PageId: $routeParams.pageId }));

      $scope.page.Highlights.push(highlight);
    }
  }

  $scope.removeHighlightings = function(){
    if(confirm('Are you sure you wan\'t to remove all highlightings?')){
      Api.removeHighlightings($routeParams.pageId)
        .then(function(){
          $scope.page.Highlights = [];
        });
    }
  }

  $scope.updatePage = function(){
    Api.updatePage($scope.editedPage)
      .then(function(){
        $scope.isEditing = false;
        _.extend($scope.page, $scope.editedPage);
      });
  }

  $scope.removePage = function(){
    if(confirm('Are you sure you wan\'t to remove this page?')){
      Api.removePage($routeParams.pageId)
        .then(function(){
          $location.path('/study-groups/' + $routeParams.groupId + '/' + $routeParams.key);
        });
    }
  }
});

StudyGroupsApp.controller('ProfileController', function($scope, $routeParams, $location, Api){
  $scope.editedUser = {};

  Api.getUser($routeParams.username)
    .then(function(user){
      $scope.user = user.data;
      $scope.editedUser = _.pick($scope.user, 'email', 'description', 'id');
    })

  $scope.toggleEditing = function(){
    $scope.isEditing = !$scope.isEditing;
  }

  $scope.updateProfile = function(){
    Api.updateUser($scope.editedUser)
      .then(function(){
        $scope.isEditing = false;
        _.extend($scope.user, $scope.editedUser);
      });
  }

  $scope.removeProfile = function(){
    if(confirm('Are you sure you wan\'t to remove your profile?')){
      Api.removeUser($scope.user.id)
        .then(function(){
          window.location.href = '/welcome';
        });
    }
  }
});

StudyGroupsApp.controller('StudyGroupController', function($scope, $location, $routeParams, Api){
  $scope.editedGroup = {};

  $scope.shareUrl = $location.absUrl();

  Api.getStudyGroup($routeParams.id, $routeParams.key)
    .then(function(group){
      $scope.group = group.data;
      $scope.editedGroup = _.pick($scope.group, 'name', 'description', 'id');
    })
    .catch(function(){
      $location.path('/study-groups');
    });

  $scope.toggleEditing = function(){
    $scope.isEditing = !$scope.isEditing;
  }

  $scope.updateStudyGroup = function(){
    Api.updateStudyGroup($scope.editedGroup)
      .then(function(){
        $scope.isEditing = false;
        _.extend($scope.group, $scope.editedGroup);
      });
  }

  $scope.removeStudyGroup = function(){
    if(confirm('Are you sure you wan\'t to remove this study group?')){
      Api.removeStudyGroup($routeParams.id)
        .then(function(){
          $location.path('/study-groups');
        });
    }
  }
});

StudyGroupsApp.controller('StudyGroupListController', function($scope, $location, Api){
  Api.getUsersStudyGroups()
    .then(function(groups){
      $scope.groups = groups.data;
    });

  $scope.newStudyGroup = {};

  $scope.toggleStudyGroupForm = function(){
    $scope.studyGroupFormIsShowing = !$scope.studyGroupFormIsShowing;
  }

  $scope.createStudyGroup = function(){
    Api.createStudyGroup($scope.newStudyGroup)
      .then(function(group){
        $location.path('/study-groups/' + group.data.id + '/' + group.data.key);
      });
  }
});

(function ($) {
    /*
     * Code for triple click from
     * http://css-tricks.com/snippets/jquery/triple-click-event/
     */
    $.event.special.tripleclick = {

        setup: function (data, namespaces) {
            var elem = this,
                $elem = jQuery(elem);
            $elem.bind('click', jQuery.event.special.tripleclick.handler);
        },

        teardown: function (namespaces) {
            var elem = this,
                $elem = jQuery(elem);
            $elem.unbind('click', jQuery.event.special.tripleclick.handler);
        },

        handler: function (event) {
            var elem = this,
                $elem = jQuery(elem),
                clicks = $elem.data('clicks') || 0;
            clicks += 1;
            if (clicks === 3) {
                clicks = 0;

                // set event type to "tripleclick"
                event.type = "tripleclick";

                // let jQuery handle the triggering of "tripleclick" event handlers
                jQuery.event.dispatch.apply(this, arguments);
            }
            $elem.data('clicks', clicks);
        }
    };

    /*
     * Attempt to get the previous sibling
     * of a container in the event of a triple
     * click.
     *
     * Adapted from http://stackoverflow.com/a/574922
     */
    function get_previoussibling(n) {
        var y = n, x;
        try {
            x = n.previousSibling;
            while (x && x.nodeType != 1) {
                y = x;
                x = x.previousSibling;
            }
        } catch (err) {
            console.log(err);
            topOffset = -15;
            return y;
        }
        return x ? x : y;
    }

    var methods = {
        init: function (options) {

            var settings = $.extend({
                'selector': '.highlighter-container',
                'minWords': 0,
                'complete': function() {}
            }, options);
            var numClicks = 0;
            var topOffset = 0;
            var leftOffset = 0;
            var isDown = false;

        var selText;

            return this.each(function () {
                /*
                 * Insert an html <span> after a user selects text.
                 * We then use the X-Y coordinates of that span
                 * to place our tooltip.
                 * Thanks to http://stackoverflow.com/a/3599599 for
                 * some inspiration.
                 */
                function insertSpanAfterSelection(clicks) {
                    var html = "<span class='dummy'><span>";
                    topOffset = 0;
                    leftOffset = 0;
                    if (numClicks !== clicks) return;
                    var isIE = (navigator.appName === "Microsoft Internet Explorer");
                    var sel, range, expandedSelRange, node;
                    var position;
                    if (window.getSelection) {
                        sel = window.getSelection();
                        selText = sel.toString();

                        if ($.trim(selText) === '' || selText.split(' ').length < settings.minWords) return;

                        if (sel.getRangeAt && sel.rangeCount) {
                            range = window.getSelection().getRangeAt(0);

                            expandedSelRange = range.cloneRange();
                            expandedSelRange.collapse(false);

                            // Range.createContextualFragment() would be useful here but is
                            // non-standard and not supported in all browsers (IE9, for one)
                            var el = document.createElement("div");
                            el.innerHTML = html;
                            var dummy = document.createElement("span");

                            if (range.startOffset === 0 && range.endOffset === 0) {

                                var cont = expandedSelRange.startContainer;
                                var prev = get_previoussibling(cont);
                                try {
                                    expandedSelRange.selectNode(prev.lastChild);
                                } catch (err) {
                                    leftOffset = 40;
                                    topOffset = -15;
                                    expandedSelRange.selectNode(prev);
                                }
                                // console.log(expandedSelRange);
                                expandedSelRange.collapse(false);
                            } else if(range.endOffset === 0 ) {
                                topOffset = -25;
                                leftOffset = 40;
                            }


                            if (numClicks !== clicks) return;
                            $(settings.selector).hide();
                            if (!isIE && $.trim(selText) === $.trim(expandedSelRange.startContainer.innerText)) {
                                expandedSelRange.startContainer.innerHTML += "<span class='dummy'>&nbsp;</span>";
                                position = $(".dummy").offset();
                                $(".dummy").remove();
                            } else if (!isIE && $.trim(selText) === $.trim(expandedSelRange.endContainer.innerText)) {
                                expandedSelRange.endContainer.innerHTML += "<span class='dummy'>&nbsp;</span>";
                                position = $(".dummy").offset();
                                $(".dummy").remove();
                            } else {
                                expandedSelRange.insertNode(dummy);
                                position = $(dummy).offset();
                                dummy.parentNode.removeChild(dummy);
                            }
                        }
                    } else if (document.selection && document.selection.createRange) {
                        range = document.selection.createRange();
                        expandedSelRange = range.duplicate();

                        selText = expandedSelRange.text;
                        if ($.trim(selText) === '' || selText.split(' ').length < settings.minWords) return;

                        range.collapse(false);
                        range.pasteHTML(html);

                        expandedSelRange.setEndPoint("EndToEnd", range);
                        expandedSelRange.select();
                        position = $(".dummy").offset();
                        $(".dummy").remove();
                    }

                    $(settings.selector).css("top", position.top + topOffset + "px");
                    $(settings.selector).css("left", position.left + leftOffset + "px");
                    $(settings.selector).show(300, function() {
                        settings.complete(selText);
                    });
                }
                $(settings.selector).hide();
                $(settings.selector).css("position", "absolute");
                $(document).bind('mouseup.highlighter', function (e) {
                    if (isDown) {
                        numClicks = 1;
                        clicks = 0;
                        setTimeout(function () {
                            insertSpanAfterSelection(1);
                        }, 300);
                        isDown = false;
                    }
                });
                $(this).bind('mouseup.highlighter', function (e) {
                    numClicks = 1;
                    clicks = 0;
                    setTimeout(function () {
                        insertSpanAfterSelection(1);
                    }, 300);
                });
                $(this).bind('tripleclick.highlighter', function (e) {
                    numClicks = 3;
                    setTimeout(function () {
                        insertSpanAfterSelection(3);
                    }, 200);
                });

                $(this).bind('dblclick.highlighter', function (e) {
                    numClicks = 2;
                    setTimeout(function () {
                        insertSpanAfterSelection(2);
                    }, 300);
                });
                $(this).bind('mousedown.highlighter', function (e) {
                    $(settings.selector).hide();
                    isDown = true;
                });

            });
        },
        destroy: function (content) {
            return this.each(function () {
                $(document).unbind('mouseup.highlighter');
                $(this).unbind('mouseup.highlighter');
                $(this).unbind('tripleclick.highlighter');
                $(this).unbind('dblclick.highlighter');
                $(this).unbind('mousedown.highlighter');
            });
        }
    };

    /*
     * Method calling logic taken from the
     * jQuery article on best practices for
     * plugins.
     *
     * http://docs.jquery.com/Plugins/Authoring
     */
    $.fn.highlighter = function (method) {
        if (methods[method]) {
            return methods[method].apply(this, Array.prototype.slice.call(arguments, 1));
        } else if (typeof method === 'object' || !method) {
            return methods.init.apply(this, arguments);
        } else {
            $.error('Method ' + method + ' does not exist on jQuery.highlighter');
        }

    };

})(jQuery);

StudyGroupsApp.directive('highlighter', function(){
  return {
    scope: {
      highlightContent: '=',
      currentlyHighlightedSection: '=',
      highlightedSections: '='
    },
    link: function(scope, elem, attrs){
      function highlight(){
        if(scope.highlightedSections.length == 0){
          $(elem).find('.highlighted-text').contents().unwrap();
        };

        var updatedContent = $(elem).html();

        scope.highlightedSections.forEach(function(section){
          var textIndex = updatedContent.indexOf(section.text);
          updatedContent = updatedContent.substring(0, textIndex) + '<span data-id="' + section.id + '" class="highlighted-text bg-' + section.type + '">' + updatedContent.substring(textIndex, textIndex + section.text.length) + '</span>' + updatedContent.substring(textIndex + section.text.length, updatedContent.length);
        });

        $(elem).html(updatedContent);
      }

      scope.$watch('highlightedSections', function(sections){
        if($(elem).html()){
          highlight();
        }
      }, true);

      scope.$watch('highlightContent', function(content){
        if(content){
          highlight();

          $(elem).highlighter({
            minWords: 3,
            complete: function(data){
              scope.$apply(function(){ scope.currentlyHighlightedSection = data });
            }
          });
        }
      });
    }
  }
});

StudyGroupsApp.directive('tooltip', function(){
  return {
    scope: {
      content: '='
    },
    restrict: 'A',
    link: function(scope, element, attrs){
      $(element).tooltip({ container: 'body', title: scope.content });
    }
  };
});
